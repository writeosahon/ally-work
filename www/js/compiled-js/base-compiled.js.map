{"version":3,"sources":["base.js"],"names":[],"mappings":"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","file":"base-compiled.js","sourcesContent":["/**\r\n * Created by UTOPIA SOFTWARE on 3/11/2017.\r\n */\r\n\r\n/**\r\n * file provides the \"base\" framework/utilities required to launch the app. E.g. file creates the base namespace which\r\n * the app is built on.\r\n *\r\n * The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\r\n * also used interchangeably\r\n **/\r\n\r\nvar utopiasoftware = {\r\n    ally : {\r\n\r\n        /**\r\n         * method is used to verify a user's phone number. it returns a Promise object. a resolved promise\r\n         * means the phone number was verified; a rejected promise means phone number verification failed.\r\n         *\r\n         * @param phoneNumber\r\n         * @returns {Promise}\r\n         */\r\n        validatePhoneNumber: function(phoneNumber){\r\n\r\n            phoneNumber = \"\" + phoneNumber; // ensure phone number is seen as a string\r\n\r\n            var phoneVerificationAnimate = null; // holds the animation object for the verification code timer\r\n\r\n            var resolvePromise = null; // holds the resolve function of the main Promise object\r\n\r\n            var rejectPromise = null; // holds the reject function of the main Promise object\r\n\r\n            if(phoneNumber.startsWith(\"0\")){ // the phone number starts with 0, replace it with international dialing code\r\n                phoneNumber = phoneNumber.replace(\"0\", \"+234\");\r\n            }\r\n            // show a loader message\r\n            $('#hour-glass-loader-modal .modal-message').html(\"Verifying Phone Number...\");\r\n            $('#hour-glass-loader-modal').get(0).show(); // show loader\r\n\r\n            // create the Promise object which will indicate if a phone was verified or not\r\n            var phoneNumberVerifiedPromise = new Promise(function(resolve, reject){\r\n                resolvePromise = resolve;\r\n                rejectPromise = reject;\r\n\r\n                // sent message to twilio to verify provide phone number\r\n                Promise.resolve($.ajax(\r\n                    {\r\n                        url: 'https://api.authy.com/protected/json/phones/verification/start',\r\n                        type: \"post\",\r\n                        contentType: \"application/x-www-form-urlencoded\",\r\n                        beforeSend: function(jqxhr) {\r\n                            jqxhr.setRequestHeader(\"X-ALLY-APP\", \"mobile\");\r\n                        },\r\n                        dataType: \"json\",\r\n                        timeout: 240000, // wait for 4 minutes before timeout of request\r\n                        processData: true,\r\n                        data: {api_key: 'j8B13Xqi57LtUgDhZe4xclf7Km56FPhH',\r\n                            via: 'call',\r\n                            country_code: 234,\r\n                            phone_number: phoneNumber} // data to submit to server\r\n                    }\r\n                )).\r\n                then(function(verificationResponse){ // get the verification response\r\n                    if(verificationResponse.success !== true){ // the generating verification code failed\r\n                        throw verificationResponse; // throw an error containing the verification response\r\n                    }\r\n\r\n                    return verificationResponse; // return verification response\r\n\r\n                }).\r\n                then(function(verificationResponse){ // compare the generated code with the user input\r\n\r\n                    // instantiate the phoneVerificationAnimate object\r\n                    phoneVerificationAnimate = anime({\r\n                        targets: verificationResponse,\r\n                        seconds_to_expire: [{value: 0}],\r\n                        duration: verificationResponse.seconds_to_expire * 1000,\r\n                        easing: 'linear',\r\n                        round: true,\r\n                        direction: 'normal',\r\n                        autoplay: false,\r\n                        update: function() {\r\n                            $('#phone-verification-code-check .phone-verification-timer').\r\n                            html(verificationResponse.seconds_to_expire);\r\n                        },\r\n                        complete: function(){\r\n                            $('#phone-verification-code-check').get(0).hide();\r\n                            $('#phone-verification-code-check').remove();\r\n                            $('#hour-glass-loader-modal').get(0).hide(); // hide loader\r\n                            rejectPromise(\"phone verification code timed out\");\r\n                        }\r\n                    });\r\n                    phoneVerificationAnimate.play(); // start the animated timer\r\n                    return ons.notification.prompt({title: \"Phone Number Verification\",\r\n                        id: 'phone-verification-code-check',\r\n                        messageHTML: `<div><ons-icon icon=\"md-ally-icon-code-equal\" size=\"24px\"\r\n                    style=\"color: #30a401; float: left; width: 26px;\"></ons-icon>\r\n                    <span style=\"float: right; width: calc(100% - 26px);\">\r\n                    Please enter the verification code you received<br>\r\n                    Code Expires In: <span class=\"phone-verification-timer\"\r\n                    style=\"display: inline-block; font-weight: bold; margin-top: 2em;\">${verificationResponse.seconds_to_expire}</span> seconds</span></div>`,\r\n                        cancelable: false, placeholder: \"CODE\", inputType: \"tel\", defaultValue: \"\", autofocus: false,\r\n                        submitOnEnter: true\r\n                    });\r\n                }).then(function(userInput){ // get the verification code inputed by the user\r\n                    phoneVerificationAnimate.pause(); // pause the animated timer\r\n                    if(! userInput){ // user input is null or undefined\r\n                        throw \"error\";\r\n                    }\r\n\r\n                    // call the code used to verify the inputed user verification code\r\n                    return Promise.resolve($.ajax(\r\n                        {\r\n                            url: 'https://api.authy.com/protected/json/phones/verification/check',\r\n                            type: \"get\",\r\n                            cache: false,\r\n                            //contentType: \"application/x-www-form-urlencoded\",\r\n                            beforeSend: function(jqxhr) {\r\n                                jqxhr.setRequestHeader(\"X-ALLY-APP\", \"mobile\");\r\n                            },\r\n                            dataType: \"json\",\r\n                            timeout: 240000, // wait for 4 minutes before timeout of request\r\n                            processData: true,\r\n                            data: {api_key: 'j8B13Xqi57LtUgDhZe4xclf7Km56FPhH',\r\n                                country_code: 234,\r\n                                phone_number: phoneNumber,\r\n                                verification_code: userInput.trim()} // data to submit to server\r\n                        }\r\n                    ));\r\n                }).\r\n                then(function(verificationResponse){ // check if user verification code matched\r\n                    if(verificationResponse.success !== true){  // verification code failed\r\n                        throw verificationResponse;\r\n                    }\r\n\r\n                    $('#hour-glass-loader-modal').get(0).hide(); // hide loader\r\n                    resolvePromise(); // phone verification code completed\r\n                }).\r\n                catch(function(err){\r\n                    phoneVerificationAnimate.pause(); // start the animated timer\r\n                    $('#hour-glass-loader-modal').get(0).hide(); // hide loader\r\n\r\n                    if(err && err.message){\r\n                        rejectPromise(err.message);\r\n                    }\r\n                    else if (err && err.responseText){\r\n                        err = JSON.parse(err.responseText);\r\n                        rejectPromise(err.message);\r\n                    }\r\n                    else{\r\n                        rejectPromise(\"phone number verification failed\");\r\n                    }\r\n                });\r\n\r\n            });\r\n\r\n            return phoneNumberVerifiedPromise;\r\n        },\r\n\r\n\r\n        /**\r\n         * method returns a Promise which saves the app details of the current user (in encrypted persistent storage) OR\r\n         * the Promise rejects with an error object\r\n         *\r\n         * @param userDetails {Object} contains the user details to be saved in encrypted storage\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        saveUserAppDetails: function(userDetails){\r\n\r\n            return new Promise(function(resolve, reject){\r\n\r\n                // check if a timestamp has been appended to the user details\r\n                if(!userDetails._lastUpdatedDate){ // no timestamp, so attach one\r\n                    userDetails._lastUpdatedDate = Date.now(); // attach timestamp\r\n                }\r\n\r\n                // write the provided user details to encrypted storage\r\n                Promise.resolve(intel.security.secureData.\r\n                createFromData({\"data\": JSON.stringify(userDetails)})).\r\n                then(function(instanceId){\r\n\r\n                    return Promise.resolve(\r\n                        intel.security.secureStorage.write({\"id\": \"ally-user-details\", \"instanceID\": instanceId})\r\n                    );\r\n                }).\r\n                then(function(){\r\n                    resolve(userDetails); // return the provided userDetails parameter back to the caller and resolve the Promise\r\n                }).\r\n                catch(function(err){\r\n                    reject(err); // reject the Promise with the provided error\r\n                })\r\n            });\r\n        },\r\n\r\n\r\n        /**\r\n         * method returns a Promise which contains the cached app details of the current user OR\r\n         * the Promise rejects with an error object\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        loadUserCachedAppDetails: function(){\r\n\r\n            return new Promise(function(resolve, reject){\r\n\r\n                // read the cached data from encrypted storage\r\n                Promise.resolve(intel.security.secureStorage.read({'id':'ally-user-details'})).\r\n                then(function(instanceId){\r\n\r\n                    return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                }).\r\n                then(function(userDetails){\r\n                    resolve(JSON.parse(userDetails)); // return the cached app details and resolve the Promise\r\n                }).\r\n                catch(function(err){\r\n                    reject(err); // reject the Promise with the provided error\r\n                })\r\n            });\r\n        },\r\n\r\n        /**\r\n         * method is used to sort the collection of Nigerian Banks returned by MoneyWave.\r\n         * Banks objects are sorted in ascending order of bank name.\r\n         */\r\n        banksData: function(){\r\n            // return the Promise object\r\n            return new Promise(function(resolve, reject){\r\n                // retrieve the list of banks\r\n                Promise.resolve($.ajax(\r\n                    {\r\n                        url: \"banks.json\",\r\n                        type: \"get\",\r\n                        dataType: \"json\",\r\n                        timeout: 240000 // wait for 4 minutes before timeout of request\r\n\r\n                    }\r\n                )).\r\n                then(function(banksData){ // get the banks object\r\n                    var banksArray = []; // holds the banks array\r\n                    // convert each property and value of the banks object to an object\r\n                    // and store each object in a 'banks array'\r\n                    for(var prop in banksData){\r\n                        // create the bank object\r\n                        let bankObject = {};\r\n                        bankObject[\"code\"] = prop;\r\n                        bankObject[\"name\"] = banksData[prop];\r\n                        // add bank object to banks array\r\n                        banksArray.push(bankObject);\r\n                    }\r\n\r\n                    return banksArray; // return the banks array\r\n                }).\r\n                then(function(bankArrayData){ // receive the bank array\r\n                    resolve(bankArrayData); // resolve the promise with the bank array\r\n                }).\r\n                catch();\r\n            });\r\n        },\r\n\r\n\r\n        /**\r\n         * object holds the methods used to operate the cached chart data for the Dashboard page\r\n         */\r\n        dashboardCharts: {\r\n\r\n            /**\r\n             * method is used to save/cache the data for the wallet transfers-in chart\r\n             *\r\n             * @param chartDataArray {Array} the chart data to be saved\r\n             *\r\n             * @return {Promise} returns a promise that resolves to the data being saved\r\n             */\r\n            saveWalletTransferInData: function(chartDataArray){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // check if a timestamp has been appended to the data being saved\r\n                    if(!chartDataArray._lastUpdatedDate){ // no timestamp, so attach one\r\n                        chartDataArray._lastUpdatedDate = Date.now(); // attach timestamp\r\n                    }\r\n\r\n                    // write the provided chart data to encrypted storage\r\n                    Promise.resolve(intel.security.secureData.\r\n                    createFromData({\"data\": JSON.stringify(chartDataArray)})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(\r\n                            intel.security.secureStorage.write({\"id\": \"ally-chart-transfer-in\", \"instanceID\": instanceId})\r\n                        );\r\n                    }).\r\n                    then(function(){\r\n                        resolve(chartDataArray); // return the provided chartDataArray parameter back to the caller and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        reject(err); // reject the Promise with the provided error\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method returns a Promise which contains the cached wallet transfer-in data OR\r\n             * the Promise rejects with an error object\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            loadWalletTransferInData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // read the cached data from encrypted storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'ally-chart-transfer-in'})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(chartDataArray){\r\n                        resolve(JSON.parse(chartDataArray)); // return the cached app chart data and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        resolve({}); // resolve the Promise with an empty object\r\n                    })\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method returns a Promise which deletes the cached chart data from the deive\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            deleteWalletTransferInData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n                    // delete the user app details from secure storage if it exists\r\n                    Promise.resolve(intel.security.secureStorage.\r\n                    delete({'id':'ally-chart-transfer-in'})).\r\n                    then(function(){resolve();},function(){resolve();}); // ALWAYS resolve the promise\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to save/cache the data for the wallet transfers-out chart\r\n             *\r\n             * @param chartDataArray {Array} the chart data to be saved\r\n             *\r\n             * @return {Promise} returns a promise that resolves to the data being saved\r\n             */\r\n            saveWalletTransferOutData: function(chartDataArray){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // check if a timestamp has been appended to the data being saved\r\n                    if(!chartDataArray._lastUpdatedDate){ // no timestamp, so attach one\r\n                        chartDataArray._lastUpdatedDate = Date.now(); // attach timestamp\r\n                    }\r\n\r\n                    // write the provided chart data to encrypted storage\r\n                    Promise.resolve(intel.security.secureData.\r\n                    createFromData({\"data\": JSON.stringify(chartDataArray)})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(\r\n                            intel.security.secureStorage.write({\"id\": \"ally-chart-transfer-out\", \"instanceID\": instanceId})\r\n                        );\r\n                    }).\r\n                    then(function(){\r\n                        resolve(chartDataArray); // return the provided chartDataArray parameter back to the caller and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        reject(err); // reject the Promise with the provided error\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method returns a Promise which contains the cached wallet transfer-out data OR\r\n             * the Promise rejects with an error object\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            loadWalletTransferOutData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // read the cached data from encrypted storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'ally-chart-transfer-out'})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(chartDataArray){\r\n                        resolve(JSON.parse(chartDataArray)); // return the cached app chart data and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        resolve({}); //resolve the Promise with an empty object\r\n                    })\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method returns a Promise which deletes the cached chart data from the device\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            deleteWalletTransferOutData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n                    // delete the user app details from secure storage if it exists\r\n                    Promise.resolve(intel.security.secureStorage.\r\n                    delete({'id':'ally-chart-transfer-out'})).\r\n                    then(function(){resolve();},function(){resolve();}); // ALWAYS resolve the promise\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to save/cache the data for the wallet payments-in chart\r\n             *\r\n             * @param chartDataArray {Array} the chart data to be saved\r\n             *\r\n             * @return {Promise} returns a promise that resolves to the data being saved\r\n             */\r\n            savePaymentInData: function(chartDataArray){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // check if a timestamp has been appended to the data being saved\r\n                    if(!chartDataArray._lastUpdatedDate){ // no timestamp, so attach one\r\n                        chartDataArray._lastUpdatedDate = Date.now(); // attach timestamp\r\n                    }\r\n\r\n                    // write the provided chart data to encrypted storage\r\n                    Promise.resolve(intel.security.secureData.\r\n                    createFromData({\"data\": JSON.stringify(chartDataArray)})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(\r\n                            intel.security.secureStorage.write({\"id\": \"ally-chart-payment-in\", \"instanceID\": instanceId})\r\n                        );\r\n                    }).\r\n                    then(function(){\r\n                        resolve(chartDataArray); // return the provided chartDataArray parameter back to the caller and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        reject(err); // reject the Promise with the provided error\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method returns a Promise which contains the cached wallet payment-in data OR\r\n             * the Promise rejects with an error object\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            loadPaymentInData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // read the cached data from encrypted storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'ally-chart-payment-in'})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(chartDataArray){\r\n                        resolve(JSON.parse(chartDataArray)); // return the cached app chart data and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        resolve({}); // resolve the Promise with an empty object\r\n                    })\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method returns a Promise which deletes the cached chart data from the device\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            deletePaymentInData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n                    // delete the user app details from secure storage if it exists\r\n                    Promise.resolve(intel.security.secureStorage.\r\n                    delete({'id':'ally-chart-payment-in'})).\r\n                    then(function(){resolve();},function(){resolve();}); // ALWAYS resolve the promise\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to save/cache the data for the wallet payments-out chart\r\n             *\r\n             * @param chartDataArray {Array} the chart data to be saved\r\n             *\r\n             * @return {Promise} returns a promise that resolves to the data being saved\r\n             */\r\n            savePaymentOutData: function(chartDataArray){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // check if a timestamp has been appended to the data being saved\r\n                    if(!chartDataArray._lastUpdatedDate){ // no timestamp, so attach one\r\n                        chartDataArray._lastUpdatedDate = Date.now(); // attach timestamp\r\n                    }\r\n\r\n                    // write the provided chart data to encrypted storage\r\n                    Promise.resolve(intel.security.secureData.\r\n                    createFromData({\"data\": JSON.stringify(chartDataArray)})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(\r\n                            intel.security.secureStorage.write({\"id\": \"ally-chart-payment-out\", \"instanceID\": instanceId})\r\n                        );\r\n                    }).\r\n                    then(function(){\r\n                        resolve(chartDataArray); // return the provided chartDataArray parameter back to the caller and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        reject(err); // reject the Promise with the provided error\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method returns a Promise which contains the cached wallet payment-out data OR\r\n             * the Promise rejects with an error object\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            loadPaymentOutData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // read the cached data from encrypted storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'ally-chart-payment-out'})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(chartDataArray){\r\n                        resolve(JSON.parse(chartDataArray)); // return the cached app chart data and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        resolve({}); // resolve the Promise with an empty object\r\n                    })\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method returns a Promise which deletes the cached chart data from the device\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            deletePaymentOutData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n                    // delete the user app details from secure storage if it exists\r\n                    Promise.resolve(intel.security.secureStorage.\r\n                    delete({'id':'ally-chart-payment-out'})).\r\n                    then(function(){resolve();},function(){resolve();}); // ALWAYS resolve the promise\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to save/cache the data for the expense tracker chart\r\n             *\r\n             * @param chartDataArray {Array} the chart data to be saved\r\n             *\r\n             * @return {Promise} returns a promise that resolves to the data being saved\r\n             */\r\n            saveExpenseTrackerData: function(chartDataArray){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // check if a timestamp has been appended to the data being saved\r\n                    if(!chartDataArray._lastUpdatedDate){ // no timestamp, so attach one\r\n                        chartDataArray._lastUpdatedDate = Date.now(); // attach timestamp\r\n                    }\r\n\r\n                    // write the provided chart data to encrypted storage\r\n                    Promise.resolve(intel.security.secureData.\r\n                    createFromData({\"data\": JSON.stringify(chartDataArray)})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(\r\n                            intel.security.secureStorage.write({\"id\": \"ally-dashboard-chart-expense-tracker\", \"instanceID\": instanceId})\r\n                        );\r\n                    }).\r\n                    then(function(){\r\n                        resolve(chartDataArray); // return the provided chartDataArray parameter back to the caller and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        reject(err); // reject the Promise with the provided error\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method returns a Promise which contains the cached expense tracker chart data OR\r\n             * the Promise rejects with an error object\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            loadExpenseTrackerData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // read the cached data from encrypted storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'ally-dashboard-chart-expense-tracker'})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(chartDataArray){\r\n                        resolve(JSON.parse(chartDataArray)); // return the cached app chart data and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        resolve({}); // resolve the Promise with an empty object\r\n                    })\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method returns a Promise which deletes the cached expense tracker chart data from the device\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            deleteExpenseTrackerData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n                    // delete the user app details from secure storage if it exists\r\n                    Promise.resolve(intel.security.secureStorage.\r\n                    delete({'id':'ally-dashboard-chart-expense-tracker'})).\r\n                    then(function(){resolve();},function(){resolve();}); // ALWAYS resolve the promise\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * object holds the methods used to operate the cached chart data for the Transaction History page\r\n         */\r\n        transactionHistoryCharts: {\r\n\r\n            /**\r\n             * method is used to save/cache the data for the transaction history grid\r\n             *\r\n             * @param gridDataArray {Array} the grid data to be saved\r\n             *\r\n             * @return {Promise} returns a promise that resolves to the data being saved\r\n             */\r\n            saveTransactionHistoryData: function(dataArray){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // check if a timestamp has been appended to the data being saved\r\n                    if(!dataArray._lastUpdatedDate){ // no timestamp, so attach one\r\n                        dataArray._lastUpdatedDate = Date.now(); // attach timestamp\r\n                    }\r\n\r\n                    // write the provided chart data to encrypted storage\r\n                    Promise.resolve(intel.security.secureData.\r\n                    createFromData({\"data\": JSON.stringify(dataArray)})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(\r\n                            intel.security.secureStorage.write({\"id\": \"ally-transaction-history\", \"instanceID\": instanceId})\r\n                        );\r\n                    }).\r\n                    then(function(){\r\n                        resolve(dataArray); // return the provided dataArray parameter back to the caller and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        reject(err); // reject the Promise with the provided error\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method returns a Promise which contains the cached transaction history data OR\r\n             * the Promise rejects with an error object\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            loadTransactionHistoryData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // read the cached data from encrypted storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'ally-transaction-history'})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(dataArray){\r\n                        resolve(JSON.parse(dataArray)); // return the cached app chart data and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        resolve([]); // resolve the Promise with an empty object\r\n                    })\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method returns a Promise which deletes the cached transaction data from the device\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            deleteTransactionHistoryData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n                    // delete the user app details from secure storage if it exists\r\n                    Promise.resolve(intel.security.secureStorage.\r\n                    delete({'id':'ally-transaction-history'})).\r\n                    then(function(){resolve();},function(){resolve();}); // ALWAYS resolve the promise\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * object holds the methods used to operate the cached expense grid data for the Expense Tracker page\r\n         */\r\n        expenseTrackerGrid: {\r\n\r\n            /**\r\n             * method is used to save/cache the data for the expense tracker\r\n             *\r\n             * @param dataArray {Array} the grid data to be saved\r\n             *\r\n             * @return {Promise} returns a promise that resolves to the data being saved\r\n             */\r\n            saveExpenseTrackerData: function(dataArray){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // check if a timestamp has been appended to the data being saved\r\n                    if(!dataArray._lastUpdatedDate){ // no timestamp, so attach one\r\n                        dataArray._lastUpdatedDate = Date.now(); // attach timestamp\r\n                    }\r\n\r\n                    // write the provided chart data to encrypted storage\r\n                    Promise.resolve(intel.security.secureData.\r\n                    createFromData({\"data\": JSON.stringify(dataArray)})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(\r\n                            intel.security.secureStorage.write({\"id\": \"ally-grid-expense-tracker\", \"instanceID\": instanceId})\r\n                        );\r\n                    }).\r\n                    then(function(){\r\n                        resolve(dataArray); // return the provided dataArray parameter back to the caller and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        reject(err); // reject the Promise with the provided error\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method returns a Promise which contains the cached expense tracker data OR\r\n             * the Promise rejects with an error object\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            loadExpenseTrackerData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // read the cached data from encrypted storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'ally-grid-expense-tracker'})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(chartDataArray){\r\n                        resolve(JSON.parse(chartDataArray)); // return the cached app chart data and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        resolve({}); // resolve the Promise with an empty object\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method returns a Promise which deletes the cached expense tracker data from the device\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            deleteExpenseTrackerData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n                    // delete the user app details from secure storage if it exists\r\n                    Promise.resolve(intel.security.secureStorage.\r\n                    delete({'id':'ally-grid-expense-tracker'})).\r\n                    then(function(){resolve();},function(){resolve();}); // ALWAYS resolve the promise\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * object holds the methods used to operate the cached expense chart data for the Expense Tracker page\r\n         */\r\n        expenseTrackerChart: {\r\n\r\n            /**\r\n             * method is used to save/cache the data for the expense tracker\r\n             *\r\n             * @param dataArray {Array} the grid data to be saved\r\n             *\r\n             * @return {Promise} returns a promise that resolves to the data being saved\r\n             */\r\n            saveExpenseTrackerData: function(dataArray){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // check if a timestamp has been appended to the data being saved\r\n                    if(!dataArray._lastUpdatedDate){ // no timestamp, so attach one\r\n                        dataArray._lastUpdatedDate = Date.now(); // attach timestamp\r\n                    }\r\n\r\n                    // write the provided chart data to encrypted storage\r\n                    Promise.resolve(intel.security.secureData.\r\n                    createFromData({\"data\": JSON.stringify(dataArray)})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(\r\n                            intel.security.secureStorage.write({\"id\": \"ally-chart-expense-tracker\", \"instanceID\": instanceId})\r\n                        );\r\n                    }).\r\n                    then(function(){\r\n                        resolve(dataArray); // return the provided dataArray parameter back to the caller and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        reject(err); // reject the Promise with the provided error\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method returns a Promise which contains the cached expense tracker data OR\r\n             * the Promise rejects with an error object\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            loadExpenseTrackerData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // read the cached data from encrypted storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'ally-chart-expense-tracker'})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(chartDataArray){\r\n                        resolve(JSON.parse(chartDataArray)); // return the cached app chart data and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        resolve({}); // resolve the Promise with an empty object\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method returns a Promise which deletes the cached expense tracker data from the device\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            deleteExpenseTrackerData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n                    // delete the user app details from secure storage if it exists\r\n                    Promise.resolve(intel.security.secureStorage.\r\n                    delete({'id':'ally-chart-expense-tracker'})).\r\n                    then(function(){resolve();},function(){resolve();}); // ALWAYS resolve the promise\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\r\n"]}