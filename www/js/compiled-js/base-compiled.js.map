{"version":3,"sources":["base.js"],"names":[],"mappings":"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","file":"base-compiled.js","sourcesContent":["/**\r\n * Created by UTOPIA SOFTWARE on 3/11/2017.\r\n */\r\n\r\n/**\r\n * file provides the \"base\" framework/utilities required to launch the app. E.g. file creates the base namespace which\r\n * the app is built on.\r\n *\r\n * The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\r\n * also used interchangeably\r\n **/\r\n\r\nvar utopiasoftware = {\r\n    ally : {\r\n\r\n        /**\r\n         * method is used to verify a user's phone number. it returns a Promise object. a resolved promise\r\n         * means the phone number was verified; a rejected promise means phone number verification failed.\r\n         *\r\n         * @param phoneNumber\r\n         * @returns {Promise}\r\n         */\r\n        validatePhoneNumber: function(phoneNumber){\r\n\r\n            phoneNumber = \"\" + phoneNumber; // ensure phone number is seen as a string\r\n\r\n            var smsWatcherTimer = null; // holds the timer used to stop the sms watcher\r\n\r\n            var resolvePromise = null; // holds the resolve function of the main Promise object\r\n\r\n            var rejectPromise = null; // holds the reject function of the main Promise object\r\n\r\n            if(phoneNumber.startsWith(\"0\")){ // the phone number starts with 0, replace it with international dialing code\r\n                phoneNumber = phoneNumber.replace(\"0\", \"+234\");\r\n            }\r\n            // show a loader message\r\n            $('#hour-glass-loader-modal .modal-message').html(\"Verifying Phone Number...\");\r\n            $('#hour-glass-loader-modal').get(0).show(); // show loader\r\n\r\n            // create the Promise object which will indicate if a phone was verified or not\r\n            var phoneNumberVerifiedPromise = new Promise(function(resolve, reject){\r\n                resolvePromise = resolve;\r\n                rejectPromise = reject;\r\n                var randomNumber = \"\"; //holds the random number to be sent in the sms\r\n\r\n                // start listening to the user's sms inbox\r\n                new Promise(function(resolve2, reject2){\r\n                    SMS.startWatch(resolve2, reject2);\r\n                }).\r\n                then(function(){ // intercept any incoming sms\r\n                    return new Promise(function(res, rej){\r\n                        SMS.enableIntercept(true, res, rej);\r\n                    });\r\n                }).\r\n                then(function(){ // sms watch of the user's inbox has been started\r\n                    // add listener for new arriving sms\r\n                    document.addEventListener('onSMSArrive', function(smsEvent){\r\n                        var sms = smsEvent.data;\r\n                        if(sms.address == phoneNumber && sms.body == \"ALLY-\" + randomNumber){\r\n                            clearTimeout(smsWatcherTimer); // stop the set timer\r\n                            SMS.stopWatch(function(){}, function(){}); // stop sms watch\r\n                            SMS.enableIntercept(false, function(){}, function(){}); // stop sms intercept\r\n                            document.removeEventListener('onSMSArrive'); // remove sms arrival listener\r\n                            $('#hour-glass-loader-modal').get(0).hide(); // hide loader\r\n                            resolve(); // resolve promise\r\n                        }\r\n                    });\r\n\r\n                    // return a Promise object which sends sms to the phoneNumber parameter\r\n                    return new Promise(function(resolve3, reject3){\r\n\r\n                        var randomGen = new Random(Random.engines.nativeMath); // random number generator\r\n\r\n                        for(var i = 0; i < 6; i++){\r\n                            randomNumber += \"\" + randomGen.integer(0, 9);\r\n                        }\r\n                        SMS.sendSMS(phoneNumber, \"ALLY-\" + randomNumber, resolve3, function(){\r\n                            reject3(\"SMS sending failed. Please ensure you have sufficient airtime on the specified phone number\"); // flag an error that sms verification code could not be sent\r\n                        });\r\n                    });\r\n                }).\r\n                then(function(){\r\n                    smsWatcherTimer = setTimeout(function(){\r\n                        SMS.stopWatch(function(){}, function(){});\r\n                        SMS.enableIntercept(false, function(){}, function(){}); // stop sms intercept\r\n                        document.removeEventListener('onSMSArrive');\r\n                        // hide loader\r\n                        $('#hour-glass-loader-modal').get(0).hide().\r\n                        then(function(){ // automatic verification could not be performed, so verify phone manually\r\n\r\n                            // verify the phone number verification code manually entered by user\r\n                            return ons.notification.prompt({title: \"Phone Number Verification\",\r\n                                id: 'phone-verification-code-check',\r\n                                messageHTML: `<div><ons-icon icon=\"ion-lock-combination\" size=\"24px\"\r\n                    style=\"color: #30a401; float: left; width: 26px;\"></ons-icon>\r\n                    <span style=\"float: right; width: calc(100% - 26px);\">\r\n                    Your phone number could not be verified automatically.<br>\r\n                    Please enter the verification code that was sent to your phone</span></div>`,\r\n                                cancelable: false, placeholder: \"ALLY-CODE\", inputType: \"text\", defaultValue: \"\", autofocus: false,\r\n                                submitOnEnter: true\r\n                            });\r\n                        }).\r\n                        then(function(userInput){ // retrieve the user input and compare to thr verification code produced\r\n                            userInput = (userInput + \"\").toUpperCase().trim();\r\n\r\n                            // check if user input == to produced verification code\r\n                            if(userInput == \"ALLY-\" + randomNumber){ // user input matches verification code\r\n                                resolvePromise(); // resolve the Promise to complete phone verification\r\n                            }\r\n                            else { // user input did not match verification code\r\n                                throw \"error\"\r\n                            }\r\n                        }).\r\n                        catch(function(){\r\n                            rejectPromise(\"phone number verification failed\"); // reject the promise i.e. verification failed\r\n                        });\r\n                    }, 31000);\r\n                }).\r\n                catch(function(error){\r\n                    try{\r\n                        clearTimeout(smsWatcherTimer);\r\n                    }\r\n                    catch(err){}\r\n                    SMS.stopWatch(function(){}, function(){});\r\n                    SMS.enableIntercept(false, function(){}, function(){}); // stop sms intercept\r\n                    document.removeEventListener('onSMSArrive');\r\n                    $('#hour-glass-loader-modal').get(0).hide(); // hide loader\r\n                    if(error && typeof error == \"string\"){\r\n                        reject(error);\r\n                    }\r\n                    reject(\"phone number verification failed\");\r\n                });\r\n            });\r\n\r\n            return phoneNumberVerifiedPromise;\r\n        },\r\n\r\n\r\n        /**\r\n         * method returns a Promise which saves the app details of the current user (in encrypted persistent storage) OR\r\n         * the Promise rejects with an error object\r\n         *\r\n         * @param userDetails {Object} contains the user details to be saved in encrypted storage\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        saveUserAppDetails: function(userDetails){\r\n\r\n            return new Promise(function(resolve, reject){\r\n\r\n                // check if a timestamp has been appended to the user details\r\n                if(!userDetails._lastUpdatedDate){ // no timestamp, so attach one\r\n                    userDetails._lastUpdatedDate = Date.now(); // attach timestamp\r\n                }\r\n\r\n                // write the provided user details to encrypted storage\r\n                Promise.resolve(intel.security.secureData.\r\n                createFromData({\"data\": JSON.stringify(userDetails)})).\r\n                then(function(instanceId){\r\n\r\n                    return Promise.resolve(\r\n                        intel.security.secureStorage.write({\"id\": \"ally-user-details\", \"instanceID\": instanceId})\r\n                    );\r\n                }).\r\n                then(function(){\r\n                    resolve(userDetails); // return the provided userDetails parameter back to the caller and resolve the Promise\r\n                }).\r\n                catch(function(err){\r\n                    reject(err); // reject the Promise with the provided error\r\n                })\r\n            });\r\n        },\r\n\r\n\r\n        /**\r\n         * method returns a Promise which contains the cached app details of the current user OR\r\n         * the Promise rejects with an error object\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        loadUserCachedAppDetails: function(){\r\n\r\n            return new Promise(function(resolve, reject){\r\n\r\n                // read the cached data from encrypted storage\r\n                Promise.resolve(intel.security.secureStorage.read({'id':'ally-user-details'})).\r\n                then(function(instanceId){\r\n\r\n                    return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                }).\r\n                then(function(userDetails){\r\n                    resolve(JSON.parse(userDetails)); // return the cached app details and resolve the Promise\r\n                }).\r\n                catch(function(err){\r\n                    reject(err); // reject the Promise with the provided error\r\n                })\r\n            });\r\n        },\r\n\r\n        /**\r\n         * method is used to sort the collection of Nigerian Banks returned by MoneyWave.\r\n         * Banks objects are sorted in ascending order of bank name.\r\n         */\r\n        banksData: function(){\r\n            // return the Promise object\r\n            return new Promise(function(resolve, reject){\r\n                // retrieve the list of banks\r\n                Promise.resolve($.ajax(\r\n                    {\r\n                        url: \"banks.json\",\r\n                        type: \"get\",\r\n                        dataType: \"json\",\r\n                        timeout: 240000 // wait for 4 minutes before timeout of request\r\n\r\n                    }\r\n                )).\r\n                then(function(banksData){ // get the banks object\r\n                    var banksArray = []; // holds the banks array\r\n                    // convert each property and value of the banks object to an object\r\n                    // and store each object in a 'banks array'\r\n                    for(var prop in banksData){\r\n                        // create the bank object\r\n                        let bankObject = {};\r\n                        bankObject[\"code\"] = prop;\r\n                        bankObject[\"name\"] = banksData[prop];\r\n                        // add bank object to banks array\r\n                        banksArray.push(bankObject);\r\n                    }\r\n\r\n                    return banksArray; // return the banks array\r\n                }).\r\n                then(function(bankArrayData){ // receive the bank array\r\n                    resolve(bankArrayData); // resolve the promise with the bank array\r\n                }).\r\n                catch();\r\n            });\r\n        },\r\n\r\n\r\n        /**\r\n         * object holds the methods used to operate the cached chart data for the Dashboard page\r\n         */\r\n        dashboardCharts: {\r\n\r\n            /**\r\n             * method is used to save/cache the data for the wallet transfers-in chart\r\n             *\r\n             * @param chartDataArray {Array} the chart data to be saved\r\n             *\r\n             * @return {Promise} returns a promise that resolves to the data being saved\r\n             */\r\n            saveWalletTransferInData: function(chartDataArray){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // check if a timestamp has been appended to the data being saved\r\n                    if(!chartDataArray._lastUpdatedDate){ // no timestamp, so attach one\r\n                        chartDataArray._lastUpdatedDate = Date.now(); // attach timestamp\r\n                    }\r\n\r\n                    // write the provided chart data to encrypted storage\r\n                    Promise.resolve(intel.security.secureData.\r\n                    createFromData({\"data\": JSON.stringify(chartDataArray)})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(\r\n                            intel.security.secureStorage.write({\"id\": \"ally-chart-transfer-in\", \"instanceID\": instanceId})\r\n                        );\r\n                    }).\r\n                    then(function(){\r\n                        resolve(chartDataArray); // return the provided chartDataArray parameter back to the caller and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        reject(err); // reject the Promise with the provided error\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method returns a Promise which contains the cached wallet transfer-in data OR\r\n             * the Promise rejects with an error object\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            loadWalletTransferInData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // read the cached data from encrypted storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'ally-chart-transfer-in'})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(chartDataArray){\r\n                        resolve(JSON.parse(chartDataArray)); // return the cached app chart data and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        resolve({}); // resolve the Promise with an empty object\r\n                    })\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method returns a Promise which deletes the cached chart data from the deive\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            deleteWalletTransferInData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n                    // delete the user app details from secure storage if it exists\r\n                    Promise.resolve(intel.security.secureStorage.\r\n                    delete({'id':'ally-chart-transfer-in'})).\r\n                    then(function(){resolve();},function(){resolve();}); // ALWAYS resolve the promise\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to save/cache the data for the wallet transfers-out chart\r\n             *\r\n             * @param chartDataArray {Array} the chart data to be saved\r\n             *\r\n             * @return {Promise} returns a promise that resolves to the data being saved\r\n             */\r\n            saveWalletTransferOutData: function(chartDataArray){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // check if a timestamp has been appended to the data being saved\r\n                    if(!chartDataArray._lastUpdatedDate){ // no timestamp, so attach one\r\n                        chartDataArray._lastUpdatedDate = Date.now(); // attach timestamp\r\n                    }\r\n\r\n                    // write the provided chart data to encrypted storage\r\n                    Promise.resolve(intel.security.secureData.\r\n                    createFromData({\"data\": JSON.stringify(chartDataArray)})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(\r\n                            intel.security.secureStorage.write({\"id\": \"ally-chart-transfer-out\", \"instanceID\": instanceId})\r\n                        );\r\n                    }).\r\n                    then(function(){\r\n                        resolve(chartDataArray); // return the provided chartDataArray parameter back to the caller and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        reject(err); // reject the Promise with the provided error\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method returns a Promise which contains the cached wallet transfer-out data OR\r\n             * the Promise rejects with an error object\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            loadWalletTransferOutData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // read the cached data from encrypted storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'ally-chart-transfer-out'})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(chartDataArray){\r\n                        resolve(JSON.parse(chartDataArray)); // return the cached app chart data and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        resolve({}); //resolve the Promise with an empty object\r\n                    })\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method returns a Promise which deletes the cached chart data from the device\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            deleteWalletTransferOutData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n                    // delete the user app details from secure storage if it exists\r\n                    Promise.resolve(intel.security.secureStorage.\r\n                    delete({'id':'ally-chart-transfer-out'})).\r\n                    then(function(){resolve();},function(){resolve();}); // ALWAYS resolve the promise\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to save/cache the data for the wallet payments-in chart\r\n             *\r\n             * @param chartDataArray {Array} the chart data to be saved\r\n             *\r\n             * @return {Promise} returns a promise that resolves to the data being saved\r\n             */\r\n            savePaymentInData: function(chartDataArray){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // check if a timestamp has been appended to the data being saved\r\n                    if(!chartDataArray._lastUpdatedDate){ // no timestamp, so attach one\r\n                        chartDataArray._lastUpdatedDate = Date.now(); // attach timestamp\r\n                    }\r\n\r\n                    // write the provided chart data to encrypted storage\r\n                    Promise.resolve(intel.security.secureData.\r\n                    createFromData({\"data\": JSON.stringify(chartDataArray)})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(\r\n                            intel.security.secureStorage.write({\"id\": \"ally-chart-payment-in\", \"instanceID\": instanceId})\r\n                        );\r\n                    }).\r\n                    then(function(){\r\n                        resolve(chartDataArray); // return the provided chartDataArray parameter back to the caller and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        reject(err); // reject the Promise with the provided error\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method returns a Promise which contains the cached wallet payment-in data OR\r\n             * the Promise rejects with an error object\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            loadPaymentInData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // read the cached data from encrypted storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'ally-chart-payment-in'})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(chartDataArray){\r\n                        resolve(JSON.parse(chartDataArray)); // return the cached app chart data and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        resolve({}); // resolve the Promise with an empty object\r\n                    })\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method returns a Promise which deletes the cached chart data from the device\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            deletePaymentInData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n                    // delete the user app details from secure storage if it exists\r\n                    Promise.resolve(intel.security.secureStorage.\r\n                    delete({'id':'ally-chart-payment-in'})).\r\n                    then(function(){resolve();},function(){resolve();}); // ALWAYS resolve the promise\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method is used to save/cache the data for the wallet payments-out chart\r\n             *\r\n             * @param chartDataArray {Array} the chart data to be saved\r\n             *\r\n             * @return {Promise} returns a promise that resolves to the data being saved\r\n             */\r\n            savePaymentOutData: function(chartDataArray){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // check if a timestamp has been appended to the data being saved\r\n                    if(!chartDataArray._lastUpdatedDate){ // no timestamp, so attach one\r\n                        chartDataArray._lastUpdatedDate = Date.now(); // attach timestamp\r\n                    }\r\n\r\n                    // write the provided chart data to encrypted storage\r\n                    Promise.resolve(intel.security.secureData.\r\n                    createFromData({\"data\": JSON.stringify(chartDataArray)})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(\r\n                            intel.security.secureStorage.write({\"id\": \"ally-chart-payment-out\", \"instanceID\": instanceId})\r\n                        );\r\n                    }).\r\n                    then(function(){\r\n                        resolve(chartDataArray); // return the provided chartDataArray parameter back to the caller and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        reject(err); // reject the Promise with the provided error\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method returns a Promise which contains the cached wallet payment-out data OR\r\n             * the Promise rejects with an error object\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            loadPaymentOutData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // read the cached data from encrypted storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'ally-chart-payment-out'})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(chartDataArray){\r\n                        resolve(JSON.parse(chartDataArray)); // return the cached app chart data and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        resolve({}); // resolve the Promise with an empty object\r\n                    })\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method returns a Promise which deletes the cached chart data from the device\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            deletePaymentOutData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n                    // delete the user app details from secure storage if it exists\r\n                    Promise.resolve(intel.security.secureStorage.\r\n                    delete({'id':'ally-chart-payment-out'})).\r\n                    then(function(){resolve();},function(){resolve();}); // ALWAYS resolve the promise\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * object holds the methods used to operate the cached chart data for the Transaction History page\r\n         */\r\n        transactionHistoryCharts: {\r\n\r\n            /**\r\n             * method is used to save/cache the data for the transaction history grid\r\n             *\r\n             * @param gridDataArray {Array} the grid data to be saved\r\n             *\r\n             * @return {Promise} returns a promise that resolves to the data being saved\r\n             */\r\n            saveTransactionHistoryData: function(dataArray){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // check if a timestamp has been appended to the data being saved\r\n                    if(!dataArray._lastUpdatedDate){ // no timestamp, so attach one\r\n                        dataArray._lastUpdatedDate = Date.now(); // attach timestamp\r\n                    }\r\n\r\n                    // write the provided chart data to encrypted storage\r\n                    Promise.resolve(intel.security.secureData.\r\n                    createFromData({\"data\": JSON.stringify(dataArray)})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(\r\n                            intel.security.secureStorage.write({\"id\": \"ally-transaction-history\", \"instanceID\": instanceId})\r\n                        );\r\n                    }).\r\n                    then(function(){\r\n                        resolve(dataArray); // return the provided dataArray parameter back to the caller and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        reject(err); // reject the Promise with the provided error\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * method returns a Promise which contains the cached transaction history data OR\r\n             * the Promise rejects with an error object\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            loadTransactionHistoryData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    // read the cached data from encrypted storage\r\n                    Promise.resolve(intel.security.secureStorage.read({'id':'ally-transaction-history'})).\r\n                    then(function(instanceId){\r\n\r\n                        return Promise.resolve(intel.security.secureData.getData(instanceId));\r\n                    }).\r\n                    then(function(dataArray){\r\n                        resolve(JSON.parse(dataArray)); // return the cached app chart data and resolve the Promise\r\n                    }).\r\n                    catch(function(err){\r\n                        resolve([]); // resolve the Promise with an empty object\r\n                    })\r\n                });\r\n            },\r\n\r\n\r\n            /**\r\n             * method returns a Promise which deletes the cached transaction data from the device\r\n             *\r\n             * @returns {Promise}\r\n             */\r\n            deleteTransactionHistoryData: function(){\r\n\r\n                return new Promise(function(resolve, reject){\r\n                    // delete the user app details from secure storage if it exists\r\n                    Promise.resolve(intel.security.secureStorage.\r\n                    delete({'id':'ally-transaction-history'})).\r\n                    then(function(){resolve();},function(){resolve();}); // ALWAYS resolve the promise\r\n                });\r\n            }\r\n        }\r\n    }\r\n};\r\n"]}