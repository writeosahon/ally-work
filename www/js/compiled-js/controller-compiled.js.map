{"version":3,"sources":["controller.js"],"names":[],"mappings":"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","file":"controller-compiled.js","sourcesContent":["/**\r\n * Created by UTOPIA SOFTWARE on 3/11/2017.\r\n */\r\n\r\n/**\r\n * file defines all View-Models, Controllers and Event Listeners used by the app\r\n *\r\n * The 'utopiasoftware.ally' namespace has being defined in the base js file.\r\n * The author uses the terms 'method' and function interchangeably; likewise the terms 'attribute' and 'property' are\r\n * also used interchangeably\r\n */\r\n\r\n\r\n// define the controller namespace\r\nutopiasoftware.ally.controller = {\r\n\r\n    /**\r\n     * method is used to handle the special event created by the intel xdk developer library. The special event (app.Ready)\r\n     * is triggered when ALL the hybrid app plugins have been loaded/readied and also the document DOM content is ready\r\n     */\r\n    appReady: () => {\r\n\r\n        // initialise the onsen library\r\n        ons.ready(function () {\r\n            // set the default handler for the app\r\n            ons.setDefaultDeviceBackButtonListener(function(){\r\n                // does nothing for now!!\r\n            });\r\n\r\n\r\n            if(utopiasoftware.ally.model.isAppReady === false){ // if app has not completed loading\r\n                // displaying prepping message\r\n                $('#loader-modal-message').html(\"Loading App...\");\r\n                $('#loader-modal').get(0).show(); // show loader\r\n            }\r\n\r\n            // check if the user is currently logged in\r\n            if(window.localStorage.getItem(\"app-status\") && window.localStorage.getItem(\"app-status\") != \"\"){ // user is logged in\r\n                //set the first page to be displayed to be the login page\r\n                $('ons-splitter').get(0).content.load(\"login-template\");\r\n            }\r\n            else{ // user has NOT been logged in\r\n                // set the first page to be displayed to be the onboarding page\r\n                $('ons-splitter').get(0).content.load(\"onboarding-template\");\r\n            }\r\n\r\n            // set the content page for the app\r\n            //$('ons-splitter').get(0).content.load(\"app-main-template\");\r\n\r\n\r\n        });\r\n        // END OF ONSEN LIBRARY READY EVENT\r\n\r\n\r\n        // add listener for when the Internet network connection is offline\r\n        document.addEventListener(\"offline\", function(){\r\n\r\n            // display a toast message to let user no there is no Internet connection\r\n            window.plugins.toast.showWithOptions({\r\n                message: \"No Internet Connection. App functionality may be limited\",\r\n                duration: 4000, // 4000 ms\r\n                position: \"bottom\",\r\n                styling: {\r\n                    opacity: 1,\r\n                    backgroundColor: '#000000',\r\n                    textColor: '#FFFFFF',\r\n                    textSize: 14\r\n                }\r\n            });\r\n\r\n        }, false);\r\n\r\n\r\n        try {\r\n            // lock the orientation of the device to 'PORTRAIT'\r\n            screen.lockOrientation('portrait');\r\n        }\r\n        catch(err){}\r\n\r\n        // set status bar color\r\n        StatusBar.backgroundColorByHexString(\"#2C8E01\");\r\n\r\n        // prepare the inapp browser plugin\r\n        window.open = cordova.InAppBrowser.open;\r\n\r\n        // use Promises to load the other cordova plugins\r\n        new Promise(function(resolve, reject){\r\n            // this promise  just sets the promise chain in motion\r\n            window.setTimeout(function(){\r\n                resolve(); // resolve the promise\r\n            }, 0);\r\n        }).\r\n        then(function(){\r\n\r\n            // run the Microsoft Code-Push plugin\r\n            /*codePush.sync(null, {updateDialog: {updateTitle: \"Updated Content\",\r\n                mandatoryUpdateMessage: \"The app has updated content. Press 'Continue' to retrieve content and restart app\"},\r\n                installMode: InstallMode.IMMEDIATE, mandatoryInstallMode: InstallMode.IMMEDIATE}); */\r\n\r\n            return;\r\n        }).\r\n        then(function(){\r\n            // notify the app that the app has been successfully initialised and is ready for further execution (set app ready flag to true)\r\n            utopiasoftware.ally.model.isAppReady = true;\r\n            // hide the splash screen\r\n            navigator.splashscreen.hide();\r\n        }).\r\n        catch(function(err){\r\n\r\n            // notify the app that the app has been successfully initialised and is ready for further execution (set app ready flag to true)\r\n            utopiasoftware.ally.model.isAppReady = true;\r\n            // hide the splash screen\r\n            navigator.splashscreen.hide();\r\n\r\n            // display a toast message to let user no there is no Internet connection\r\n            window.plugins.toast.showWithOptions({\r\n                message: \"Startup Error. App functionality may be limited. Always update the app to \" +\r\n                \"get the best secure experience. Please contact us if problem continues\",\r\n                duration: 5000, // 5000 ms\r\n                position: \"bottom\",\r\n                styling: {\r\n                    opacity: 1,\r\n                    backgroundColor: '#000000',\r\n                    textColor: '#FFFFFF',\r\n                    textSize: 14\r\n                }\r\n            });\r\n        });\r\n\r\n    },\r\n\r\n\r\n    /**\r\n     * object is the view-model for the app side menu\r\n     */\r\n    sideMenuViewModel : {\r\n\r\n        /**\r\n         * method is used to listen for when the list\r\n         * items in the side menu is clicked\r\n         *\r\n         * @param label {String} label represents clicked list item in the side-menu\r\n         */\r\n        sideMenuListClicked: function(label) {\r\n\r\n\r\n            if(label == \"events schedule\"){ // 'events schedule' button was clicked\r\n\r\n                // close the side menu\r\n                $('ons-splitter').get(0).left.close().\r\n                then(function(){\r\n                    $('#app-main-navigator').get(0).bringPageTop(\"events-schedule-page.html\", {}); // navigate to the specified page\r\n                }).catch(function(){});\r\n\r\n                return;\r\n            }\r\n\r\n            if(label == \"hotels\"){ // 'hotels' button was clicked\r\n\r\n                // close the side menu\r\n                $('ons-splitter').get(0).left.close().\r\n                then(function(){\r\n                    $('#app-main-navigator').get(0).bringPageTop(\"hotels-page.html\", {}); // navigate to the specified page\r\n                }).catch(function(){});\r\n\r\n                return;\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * object is view-model for main-menu page\r\n     */\r\n    mainMenuPageViewModel: {\r\n\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            function loadPageOnAppReady(){\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if(!ons.isReady() || utopiasoftware.ally.model.isAppReady === false){\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // listen for the back button event\r\n                $('#app-main-navigator').get(0).topPage.onDeviceBackButton = function(){\r\n                    ons.notification.confirm('Do you want to close the app?', {title: 'Exit',\r\n                            buttonLabels: ['No', 'Yes']}) // Ask for confirmation\r\n                        .then(function(index) {\r\n                            if (index === 1) { // OK button\r\n                                navigator.app.exitApp(); // Close the app\r\n                            }\r\n                        });\r\n                };\r\n\r\n                // hide the loader\r\n                $('#loader-modal').get(0).hide();\r\n\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: function(){\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n            $('#menu-tabbar .tabbar__border').css(\"visibility\", \"hidden\");\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: function(){\r\n            // stop the rotating animation on main menu page\r\n            //$('.rotating-infinite-ease-in-1').addClass('rotating-infinite-ease-in-1-paused');\r\n        },\r\n\r\n\r\n\r\n        /**\r\n         * method is used to track changes on the tabbar tabs\r\n         * @param event\r\n         */\r\n        tabbarPreChange(event){\r\n\r\n            // determine the tab that was clicked\r\n            switch(event.originalEvent.index){\r\n                case 0:\r\n                    $('#menu-tabbar ons-tab').removeAttr(\"label\"); // remove all displaced labels\r\n\r\n                    $(event.originalEvent.tabItem).attr(\"label\", \"Dashboard\"); // update the label of the to-be displayed tab\r\n\r\n                    break;\r\n\r\n                case 1:\r\n                    $('#menu-tabbar ons-tab').removeAttr(\"label\"); // remove all displaced labels\r\n\r\n                    $(event.originalEvent.tabItem).attr(\"label\", \"Payments\"); // update the label of the to-be displayed tab\r\n\r\n                    break;\r\n\r\n                case 2:\r\n                    $('#menu-tabbar ons-tab').removeAttr(\"label\"); // remove all displaced labels\r\n\r\n                    $(event.originalEvent.tabItem).attr(\"label\", \"Wallet\"); // update the label of the to-be displayed tab\r\n\r\n                    break;\r\n\r\n                case 3:\r\n                    $('#menu-tabbar ons-tab').removeAttr(\"label\"); // remove all displaced labels\r\n\r\n                    $(event.originalEvent.tabItem).attr(\"label\", \"Account\"); // update the label of the to-be displayed tab\r\n\r\n                    break;\r\n\r\n                case 4:\r\n                    $('#menu-tabbar ons-tab').removeAttr(\"label\"); // remove all displaced labels\r\n\r\n                    $(event.originalEvent.tabItem).attr(\"label\", \"Menu\"); // update the label of the to-be displayed tab\r\n\r\n                    break;\r\n            }\r\n        }\r\n\r\n\r\n\r\n    },\r\n\r\n    /**\r\n     * object is view-model for onboarding page\r\n     */\r\n    onboardingPageViewModel: {\r\n\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            function loadPageOnAppReady(){\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if(!ons.isReady() || utopiasoftware.ally.model.isAppReady === false){\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // listen for the back button event\r\n                $('#onboarding-navigator').get(0).topPage.onDeviceBackButton = function(){\r\n                    ons.notification.confirm('Do you want to close the app?', {title: 'Exit',\r\n                            buttonLabels: ['No', 'Yes']}) // Ask for confirmation\r\n                        .then(function(index) {\r\n                            if (index === 1) { // OK button\r\n                                navigator.app.exitApp(); // Close the app\r\n                            }\r\n                        });\r\n                };\r\n\r\n                // hide the loader\r\n                $('#loader-modal').get(0).hide();\r\n\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: function(){\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: function(){\r\n        },\r\n\r\n\r\n        /**\r\n         * method is used to listen for click events of the \"Sign Up\" button\r\n         *\r\n         */\r\n        signupButtonClicked: function(){\r\n\r\n            $('#onboarding-navigator').get(0).pushPage(\"signup-page.html\", {}); // navigate to the signup page\r\n\r\n\r\n        },\r\n\r\n        /**\r\n         * method is used to listen for click events of the \"Login\" button\r\n         *\r\n         */\r\n        loginButtonClicked: function(){\r\n\r\n            $('ons-splitter').get(0).content.load('login-template'); // navigate to the login page\r\n\r\n\r\n        },\r\n\r\n        /**\r\n         * method is used to track changes on the carousel slides\r\n         * @param event\r\n         */\r\n        carouselPostChange(event){\r\n\r\n            // change the carousel counter indicator based on the currently active and previously active carousel slides\r\n            $('#onboarding-page .carousel-counter').eq(event.originalEvent.lastActiveIndex).removeClass('active');\r\n            $('#onboarding-page .carousel-counter').eq(event.originalEvent.activeIndex).addClass('active');\r\n        }\r\n\r\n\r\n\r\n    },\r\n\r\n\r\n    /**\r\n     * object is view-model for login page\r\n     */\r\n    loginPageViewModel: {\r\n\r\n        /**\r\n         * used to hold the parsley form validation object for the sign-in page\r\n         */\r\n        formValidator: null,\r\n\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            function loadPageOnAppReady(){\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if(!ons.isReady() || utopiasoftware.ally.model.isAppReady === false){\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // listen for the back button event\r\n                $('#login-navigator').get(0).topPage.onDeviceBackButton = function(){\r\n\r\n                    $('ons-splitter').get(0).content.load('onboarding-template');\r\n                };\r\n\r\n                // check if the user is currently logged in\r\n                if(window.localStorage.getItem(\"app-status\") && window.localStorage.getItem(\"app-status\") != \"\"){ // user is logged in\r\n                    // display the user's save phone number on the login page phonenumber input\r\n                    //$('#login-form #user-phone').val(utopiasoftware.saveup.model.appUserDetails.phoneNumber);\r\n                }\r\n\r\n                // initialise the login form validation\r\n                utopiasoftware.ally.controller.loginPageViewModel.formValidator = $('#login-form').parsley();\r\n\r\n                // attach listener for the log in button click event on the login page\r\n                $('#login-signin').get(0).onclick = function(){\r\n                    // run the validation method for the sign-in form\r\n                    utopiasoftware.ally.controller.loginPageViewModel.formValidator.whenValidate();\r\n                };\r\n\r\n                // listen for log in form field validation failure event\r\n                utopiasoftware.ally.controller.loginPageViewModel.formValidator.on('field:error', function(fieldInstance) {\r\n                    // get the element that triggered the field validation error and use it to display tooltip\r\n                    // display tooltip\r\n                    $(fieldInstance.$element).addClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                    $(fieldInstance.$element).attr(\"data-hint\", fieldInstance.getErrorsMessages()[0]);\r\n                });\r\n\r\n                // listen for log in form field validation success event\r\n                utopiasoftware.ally.controller.loginPageViewModel.formValidator.on('field:success', function(fieldInstance) {\r\n                    // remove tooltip from element\r\n                    $(fieldInstance.$element).removeClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                    $(fieldInstance.$element).removeAttr(\"data-hint\");\r\n                });\r\n\r\n                // listen for log in form validation success\r\n                utopiasoftware.ally.controller.loginPageViewModel.formValidator.on('form:success',\r\n                    utopiasoftware.ally.controller.loginPageViewModel.loginFormValidated);\r\n\r\n                // hide the loader\r\n                $('#loader-modal').get(0).hide();\r\n\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: function(){\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: function(){\r\n\r\n            try {\r\n                // remove any tooltip being displayed on all forms in the login page\r\n                $('#login-page [data-hint]').removeClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                $('#login-page [data-hint]').removeAttr(\"data-hint\");\r\n                // reset the form validator object in the sign-in page\r\n                utopiasoftware.ally.controller.loginPageViewModel.formValidator.reset();\r\n            }\r\n            catch(err){}\r\n        },\r\n\r\n        /**\r\n         * method is triggered when the page is destroyed\r\n         * @param event\r\n         */\r\n        pageDestroy: (event) => {\r\n            try{\r\n                // remove any tooltip being displayed on all forms in the login page\r\n                $('#login-page [data-hint]').removeClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                $('#login-page [data-hint]').removeAttr(\"data-hint\");\r\n                // destroy the form validator objects in the login page\r\n                utopiasoftware.ally.controller.loginPageViewModel.formValidator.destroy();\r\n            }\r\n            catch(err){}\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when sign-in form is successfully validated\r\n         *\r\n         */\r\n        loginFormValidated: function(){\r\n\r\n            $('ons-splitter').get(0).content.load('app-main-template');\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    },\r\n\r\n    /**\r\n     * object is view-model for forgot-pin page\r\n     */\r\n    forgotPinPageViewModel: {\r\n\r\n        /**\r\n         * used to hold the parsley form validation object for the page\r\n         */\r\n        formValidator: null,\r\n\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            function loadPageOnAppReady(){\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if(!ons.isReady() || utopiasoftware.ally.model.isAppReady === false){\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // listen for the back button event\r\n                $('#login-navigator').get(0).topPage.onDeviceBackButton = function(){\r\n\r\n                    $('#login-navigator').get(0).popPage({});\r\n                };\r\n\r\n\r\n                // initialise the form validation\r\n                utopiasoftware.ally.controller.forgotPinPageViewModel.formValidator = $('#forgot-pin-form').parsley();\r\n\r\n                // attach listener for the log in button click event on the login page\r\n                $('#forgot-pin-reset').get(0).onclick = function(){\r\n                    // run the validation method for the sign-in form\r\n                    utopiasoftware.ally.controller.forgotPinPageViewModel.formValidator.whenValidate();\r\n                };\r\n\r\n                // listen for log in form field validation failure event\r\n                utopiasoftware.ally.controller.forgotPinPageViewModel.formValidator.on('field:error', function(fieldInstance) {\r\n                    // get the element that triggered the field validation error and use it to display tooltip\r\n                    // display tooltip\r\n                    $(fieldInstance.$element).addClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                    $(fieldInstance.$element).attr(\"data-hint\", fieldInstance.getErrorsMessages()[0]);\r\n                });\r\n\r\n                // listen for log in form field validation success event\r\n                utopiasoftware.ally.controller.forgotPinPageViewModel.formValidator.on('field:success', function(fieldInstance) {\r\n                    // remove tooltip from element\r\n                    $(fieldInstance.$element).removeClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                    $(fieldInstance.$element).removeAttr(\"data-hint\");\r\n                });\r\n\r\n                // listen for log in form validation success\r\n                utopiasoftware.ally.controller.forgotPinPageViewModel.formValidator.on('form:success',\r\n                    utopiasoftware.ally.controller.forgotPinPageViewModel.forgotPinFormValidated);\r\n\r\n                // hide the loader\r\n                $('#loader-modal').get(0).hide();\r\n\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when page is shown\r\n         */\r\n        pageShow: function(){\r\n            // disable the swipeable feature for the app splitter\r\n            $('ons-splitter-side').removeAttr(\"swipeable\");\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when page is hidden\r\n         */\r\n        pageHide: function(){\r\n\r\n            try {\r\n                // remove any tooltip being displayed on all forms in the page\r\n                $('#forgot-pin-page [data-hint]').removeClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                $('#forgot-pin-page [data-hint]').removeAttr(\"data-hint\");\r\n                // reset the form validator object in the page\r\n                utopiasoftware.ally.controller.forgotPinPageViewModel.formValidator.reset();\r\n            }\r\n            catch(err){}\r\n        },\r\n\r\n        /**\r\n         * method is triggered when the page is destroyed\r\n         * @param event\r\n         */\r\n        pageDestroy: (event) => {\r\n            try{\r\n                // remove any tooltip being displayed on all forms in the page\r\n                $('#forgot-pin-page [data-hint]').removeClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                $('#forgot-pin-page [data-hint]').removeAttr(\"data-hint\");\r\n                // destroy the form validator objects in the page\r\n                utopiasoftware.ally.controller.forgotPinPageViewModel.formValidator.destroy();\r\n            }\r\n            catch(err){}\r\n        },\r\n\r\n\r\n        /**\r\n         * method is triggered when the form is successfully validated\r\n         *\r\n         */\r\n        forgotPinFormValidated: function(){\r\n\r\n            $('#login-navigator').get(0).popPage({});\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    },\r\n\r\n    /**\r\n     * object is view-model for signup page\r\n     */\r\n    signupPageViewModel: {\r\n\r\n        /**\r\n         * used to hold the parsley form validation object for the page\r\n         */\r\n        formValidator: null,\r\n\r\n        /**\r\n         * event is triggered when page is initialised\r\n         */\r\n        pageInit: function(event){\r\n\r\n            var $thisPage = $(event.target); // get the current page shown\r\n\r\n            // call the function used to initialise the app page if the app is fully loaded\r\n            loadPageOnAppReady();\r\n\r\n            //function is used to initialise the page if the app is fully ready for execution\r\n            function loadPageOnAppReady(){\r\n                // check to see if onsen is ready and if all app loading has been completed\r\n                if(!ons.isReady() || utopiasoftware.ally.model.isAppReady === false){\r\n                    setTimeout(loadPageOnAppReady, 500); // call this function again after half a second\r\n                    return;\r\n                }\r\n\r\n                // listen for the back button event\r\n                $thisPage.get(0).onDeviceBackButton = function(){\r\n                    // move to the onboarding page\r\n                    $('#onboarding-navigator').get(0).popPage({});\r\n                };\r\n\r\n                // initialise the create-account form validation\r\n                utopiasoftware.ally.controller.signupPageViewModel.formValidator = $('#signup-form').parsley();\r\n\r\n                // attach listener for the sign up button on the page\r\n                $('#signup-signup-button').get(0).onclick = function(){\r\n                    // run the validation method for the form\r\n                    utopiasoftware.ally.controller.signupPageViewModel.formValidator.whenValidate();\r\n                };\r\n\r\n                // listen for log in form field validation failure event\r\n                utopiasoftware.ally.controller.signupPageViewModel.formValidator.on('field:error', function(fieldInstance) {\r\n                    // get the element that triggered the field validation error and use it to display tooltip\r\n                    // display tooltip\r\n                    $(fieldInstance.$element).addClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                    $(fieldInstance.$element).attr(\"data-hint\", fieldInstance.getErrorsMessages()[0]);\r\n                });\r\n\r\n                // listen for the form field validation success event\r\n                utopiasoftware.ally.controller.signupPageViewModel.formValidator.on('field:success', function(fieldInstance) {\r\n                    // remove tooltip from element\r\n                    $(fieldInstance.$element).removeClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                    $(fieldInstance.$element).removeAttr(\"data-hint\");\r\n                });\r\n\r\n                // listen for the form validation success\r\n                utopiasoftware.ally.controller.signupPageViewModel.formValidator.on('form:success',\r\n                    utopiasoftware.ally.controller.signupPageViewModel.signupFormValidated);\r\n\r\n                // hide the loader\r\n                $('#loader-modal').get(0).hide();\r\n\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * method is triggered when the signup page is hidden\r\n         * @param event\r\n         */\r\n        pageHide: (event) => {\r\n            try {\r\n                // remove any tooltip being displayed on all forms on the page\r\n                $('#signup-page [data-hint]').removeClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                $('#signup-page [data-hint]').removeAttr(\"data-hint\");\r\n                // reset the form validator object on the page\r\n                utopiasoftware.ally.controller.signupPageViewModel.formValidator.reset();\r\n            }\r\n            catch(err){}\r\n        },\r\n\r\n        /**\r\n         * method is triggered when the signup page is destroyed\r\n         * @param event\r\n         */\r\n        pageDestroy: (event) => {\r\n            try{\r\n                // remove any tooltip being displayed on all forms on the page\r\n                $('#signup-page [data-hint]').removeClass(\"hint--always hint--success hint--medium hint--rounded hint--no-animate\");\r\n                $('#signup-page [data-hint]').removeAttr(\"data-hint\");\r\n                // destroy the form validator objects on the page\r\n                utopiasoftware.ally.controller.signupPageViewModel.formValidator.destroy();\r\n            }\r\n            catch(err){}\r\n        },\r\n\r\n        /**\r\n         * method is triggered when sign-up form is successfully validated\r\n         */\r\n        signupFormValidated: function(){\r\n\r\n            $('ons-splitter').get(0).content.load(\"app-main-template\");\r\n        },\r\n\r\n        /**\r\n         * method is triggered when the PIN visibility button is clicked.\r\n         * It toggles pin visibility\r\n         *\r\n         * @param buttonElement\r\n         */\r\n        pinVisibilityButtonClicked: function(buttonElement){\r\n            if($(buttonElement).attr(\"data-ally-visible\") === \"no\"){ // pin is not visible, make it visible\r\n                $('#signup-secure-pin input').css(\"-webkit-text-security\", \"none\"); // change the text-security for the input field\r\n                $(buttonElement).find('ons-icon').attr(\"icon\", \"md-eye-off\"); // change the icon associated with the input\r\n                $(buttonElement).attr(\"data-ally-visible\", \"yes\"); // flag the pin is now visible\r\n            }\r\n            else{ // make the pin not visible\r\n                $('#signup-secure-pin input').css(\"-webkit-text-security\", \"disc\"); // change the text-security for the input field\r\n                $(buttonElement).find('ons-icon').attr(\"icon\", \"md-eye\"); // change the icon associated with the input\r\n                $(buttonElement).attr(\"data-ally-visible\", \"no\"); // flag the pin is now invisible\r\n            }\r\n        },\r\n\r\n\r\n        /**\r\n         * method is used to change the value for the Verify Phone Number based on the checkbox state.\r\n         * This change is used to enable validation for the input\r\n         *\r\n         * @param inputElement\r\n         */\r\n        verifyPhoneNumberClicked: function(inputElement){\r\n            if(inputElement.checked){ // input is checked\r\n                // update the input value\r\n                inputElement.value = \"checked\"\r\n            }\r\n            else{ // input is NOT checked\r\n                // reset the input value\r\n                inputElement.value = \"\"\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n};\r\n"]}